// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
contract BankAccount {
    address public owner;
    uint256 public balance;
    constructor() {
        owner = msg.sender;
        balance = 0;
    }
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    function deposit(uint256 amount) public onlyOwner {
        require(amount > 0);
        balance += amount;
    }

    function withdraw(uint256 amount) public onlyOwner {
        require(amount > 0);
        require(amount <= balance);
        balance -= amount;
    }
    
    function getBalance() public view returns (uint256) {
        return balance;
    }
}





// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.0;

contract BankAccount {
    mapping(address => uint256) public balances;
    address payable public accountHolder;

    modifier onlyAccountHolder() {
        require(msg.sender == accountHolder, "Only the account holder can call this function");
        _;
    }

    constructor() {
        accountHolder = payable(msg.sender);
    }

    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0.");
        balances[msg.sender] += msg.value;
    }

    function withdraw(uint256 amountInWei) public onlyAccountHolder {
        require(amountInWei <= balances[msg.sender], "Insufficient funds.");
        require(amountInWei > 0, "Withdrawal amount must be greater than 0.");
        payable(msg.sender).transfer(amountInWei);
        balances[msg.sender] -= amountInWei;
    }
}
